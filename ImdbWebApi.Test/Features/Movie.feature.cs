// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.8.0.0
//      SpecFlow Generator Version:3.8.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ImdbWebApi.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class MovieResourceFeature : object, Xunit.IClassFixture<MovieResourceFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Movie.feature"
#line hidden
        
        public MovieResourceFeature(MovieResourceFeature.FixtureData fixtureData, ImdbWebApi_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Movie Resource", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get all movies for given year of release")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Get all movies for given year of release")]
        public virtual void GetAllMoviesForGivenYearOfRelease()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get all movies for given year of release", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.When("I make a GET Request to \'/movies?year=2002\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 6
 testRunner.Then("response code must be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 7
 testRunner.And("response data must look like \'MovieResponseData/getAllMoviesGivenYear.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get movie by id when movie with given id exists")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Get movie by id when movie with given id exists")]
        public virtual void GetMovieByIdWhenMovieWithGivenIdExists()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get movie by id when movie with given id exists", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.When("I make a GET Request to \'/movies/1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then("response code must be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
 testRunner.And("response data must look like \'MovieResponseData/getMovieByIdWhenGivenMovieExists." +
                        "json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Get movie by id when movie with given id does not exists")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Get movie by id when movie with given id does not exists")]
        public virtual void GetMovieByIdWhenMovieWithGivenIdDoesNotExists()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get movie by id when movie with given id does not exists", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 17
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 18
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 19
 testRunner.When("I make a GET Request to \'/movies/3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 20
 testRunner.Then("response code must be \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
 testRunner.And("response data must look like \'MovieResponseData/getMovieByIdWhenGivenMovieDoesnot" +
                        "Exists.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add movie with all valid inputs")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Add movie with all valid inputs")]
        public virtual void AddMovieWithAllValidInputs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add movie with all valid inputs", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 24
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
 testRunner.When("I make a POST Request to \'/movies\' with the following Data \'MovieRequestData/addM" +
                        "ovieWithAllValidInputs.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.Then("response code must be \'201\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.And("response data must look like \'MovieResponseData/addMovieWithAllValidInputs.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Add movie with invalid inputs")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Add movie with invalid inputs")]
        [Xunit.InlineDataAttribute("addMovieWithEmptyName.json", "400", "addMovieWithEmptyName.json", new string[0])]
        [Xunit.InlineDataAttribute("addMovieWithNameLessThanMinCharacters.json", "400", "addMovieWithNameLessThanMinCharacters.json", new string[0])]
        [Xunit.InlineDataAttribute("addMovieWithNameMoreThanMaxCharacters.json", "400", "addMovieWithNameMoreThanMaxCharacters.json", new string[0])]
        [Xunit.InlineDataAttribute("addMovieWithYearOfReleaseLessThanMinYear.json", "400", "addMovieWithYearOfReleaseLessThanMinYear.json", new string[0])]
        [Xunit.InlineDataAttribute("addMovieWithYearOfReleaseMoreThanMaxYear.json", "400", "addMovieWithYearOfReleaseMoreThanMaxYear.json", new string[0])]
        [Xunit.InlineDataAttribute("addMovieWithEmptyPlot.json", "400", "addMovieWithEmptyPlot.json", new string[0])]
        [Xunit.InlineDataAttribute("addMovieWithPlotLessThanMinCharacters.json", "400", "addMovieWithPlotLessThanMinCharacters.json", new string[0])]
        [Xunit.InlineDataAttribute("addMovieWithPlotMoreThanMaxCharacters.json", "400", "addMovieWithPlotMoreThanMaxCharacters.json", new string[0])]
        [Xunit.InlineDataAttribute("addMovieWithInvalidProducerId.json", "404", "addMovieWithInvalidProducerId.json", new string[0])]
        [Xunit.InlineDataAttribute("addMovieWithNoActors.json", "400", "addMovieWithNoActors.json", new string[0])]
        [Xunit.InlineDataAttribute("addMovieWithInvalidActorIds.json", "404", "addMovieWithInvalidActorIds.json", new string[0])]
        [Xunit.InlineDataAttribute("addMovieWithNoGenres.json", "400", "addMovieWithNoGenres.json", new string[0])]
        [Xunit.InlineDataAttribute("addMovieWithInvalidGenreIds.json", "404", "addMovieWithInvalidGenreIds.json", new string[0])]
        [Xunit.InlineDataAttribute("addMovieWithEmptyCoverImage.json", "400", "addMovieWithEmptyCoverImage.json", new string[0])]
        public virtual void AddMovieWithInvalidInputs(string movieRequestData, string statusCode, string movieResponseData, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("MovieRequestData", movieRequestData);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("MovieResponseData", movieResponseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add movie with invalid inputs", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 31
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 32
 testRunner.When(string.Format("I make a POST Request to \'/movies\' with the following Data \'MovieRequestData/{0}\'" +
                            "", movieRequestData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 33
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
 testRunner.And(string.Format("response data must look like \'MovieResponseData/{0}\'", movieResponseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Update movie with all valid inputs")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Update movie with all valid inputs")]
        public virtual void UpdateMovieWithAllValidInputs()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update movie with all valid inputs", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 53
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 54
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 55
 testRunner.When("I make a PUT Request to \'/movies/1\' with the following Data \'MovieRequestData/upd" +
                        "ateMovieWithAllValidInputs.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 56
 testRunner.Then("response code must be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
 testRunner.And("response data must look like \'MovieResponseData/updateMovieWithAllValidInputs.jso" +
                        "n\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Update movie with invalid inputs")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Update movie with invalid inputs")]
        [Xunit.InlineDataAttribute("3", "updateMovieWhenGivenMovieDoesnotExists.json", "404", "updateMovieWhenGivenMovieDoesnotExists.json", new string[0])]
        [Xunit.InlineDataAttribute("1", "updateMovieWithEmptyName.json", "400", "updateMovieWithEmptyName.json", new string[0])]
        [Xunit.InlineDataAttribute("1", "updateMovieWithNameLessThanMinCharacters.json", "400", "updateMovieWithNameLessThanMinCharacters.json", new string[0])]
        [Xunit.InlineDataAttribute("1", "updateMovieWithNameMoreThanMaxCharacters.json", "400", "updateMovieWithNameMoreThanMaxCharacters.json", new string[0])]
        [Xunit.InlineDataAttribute("1", "updateMovieWithYearOfReleaseLessThanMinYear.json", "400", "updateMovieWithYearOfReleaseLessThanMinYear.json", new string[0])]
        [Xunit.InlineDataAttribute("1", "updateMovieWithYearOfReleaseMoreThanMaxYear.json", "400", "updateMovieWithYearOfReleaseMoreThanMaxYear.json", new string[0])]
        [Xunit.InlineDataAttribute("1", "updateMovieWithEmptyPlot.json", "400", "updateMovieWithEmptyPlot.json", new string[0])]
        [Xunit.InlineDataAttribute("1", "updateMovieWithPlotLessThanMinCharacters.json", "400", "updateMovieWithPlotLessThanMinCharacters.json", new string[0])]
        [Xunit.InlineDataAttribute("1", "updateMovieWithPlotMoreThanMaxCharacters.json", "400", "updateMovieWithPlotMoreThanMaxCharacters.json", new string[0])]
        [Xunit.InlineDataAttribute("1", "updateMovieWithInvalidProducerId.json", "404", "updateMovieWithInvalidProducerId.json", new string[0])]
        [Xunit.InlineDataAttribute("1", "updateMovieWithNoActors.json", "400", "updateMovieWithNoActors.json", new string[0])]
        [Xunit.InlineDataAttribute("1", "updateMovieWithInvalidActorIds.json", "404", "updateMovieWithInvalidActorIds.json", new string[0])]
        [Xunit.InlineDataAttribute("1", "updateMovieWithNoGenres.json", "400", "updateMovieWithNoGenres.json", new string[0])]
        [Xunit.InlineDataAttribute("1", "updateMovieWithInvalidGenreIds.json", "404", "updateMovieWithInvalidGenreIds.json", new string[0])]
        [Xunit.InlineDataAttribute("1", "updateMovieWithEmptyCoverImage.json", "400", "updateMovieWithEmptyCoverImage.json", new string[0])]
        public virtual void UpdateMovieWithInvalidInputs(string id, string movieRequestData, string statusCode, string movieResponseData, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Id", id);
            argumentsOfScenario.Add("MovieRequestData", movieRequestData);
            argumentsOfScenario.Add("StatusCode", statusCode);
            argumentsOfScenario.Add("MovieResponseData", movieResponseData);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update movie with invalid inputs", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 61
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 62
 testRunner.When(string.Format("I make a PUT Request to \'/movies/{0}\' with the following Data \'MovieRequestData/{" +
                            "1}\'", id, movieRequestData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.Then(string.Format("response code must be \'{0}\'", statusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
 testRunner.And(string.Format("response data must look like \'MovieResponseData/{0}\'", movieResponseData), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete movie when movie with given id exists and is not linked")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Delete movie when movie with given id exists and is not linked")]
        public virtual void DeleteMovieWhenMovieWithGivenIdExistsAndIsNotLinked()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete movie when movie with given id exists and is not linked", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 85
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 86
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 87
 testRunner.When("I make a DELETE Request to \'/movies/2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 88
 testRunner.Then("response code must be \'200\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
 testRunner.And("response data must look like \'MovieResponseData/deleteMovieWhenGivenMovieExistsAn" +
                        "dNotLinked.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete movie when movie with given id exists and is linked")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Delete movie when movie with given id exists and is linked")]
        public virtual void DeleteMovieWhenMovieWithGivenIdExistsAndIsLinked()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete movie when movie with given id exists and is linked", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 92
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 93
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 94
 testRunner.When("I make a DELETE Request to \'/movies/1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 95
 testRunner.Then("response code must be \'400\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
 testRunner.And("response data must look like \'MovieResponseData/deletedMovieWhenGivenMovieExistsA" +
                        "ndLinked.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Delete movie when movie with given id does not exists")]
        [Xunit.TraitAttribute("FeatureTitle", "Movie Resource")]
        [Xunit.TraitAttribute("Description", "Delete movie when movie with given id does not exists")]
        public virtual void DeleteMovieWhenMovieWithGivenIdDoesNotExists()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Delete movie when movie with given id does not exists", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 99
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 100
 testRunner.Given("I am a client", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 101
 testRunner.When("I make a DELETE Request to \'/movies/3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 102
 testRunner.Then("response code must be \'404\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 103
 testRunner.And("response data must look like \'MovieResponseData/deletedMovieWhenGivenMovieDoesnot" +
                        "Exists.json\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                MovieResourceFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                MovieResourceFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
